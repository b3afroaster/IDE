{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "b5cc6f0e-0d9c-4a31-b52d-7fd4c4e43934",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import missingno\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from typing import Union\n",
    "\n",
    "SCREEN_SIZE_REGEXP = re.compile('\\d+\\.?\\d*[\"|”]')\n",
    "FLOAT_REGEXP = re.compile('\\d+\\.?\\d*')   # not exactly \"float\"\n",
    "INT_REGEXP = re.compile('\\d+')\n",
    "RAM_REGEXP = re.compile('[4|8|16|24|32|64]')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "2c8088ae-6159-4d11-89ee-0cbddb156c00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ord('\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "278df49c-37b6-4328-9c20-4a1eedd5646f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8221"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ord('”')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e3f7bd63-6363-4a37-b0f0-44864b826adb",
   "metadata": {},
   "outputs": [],
   "source": [
    "float_candidate = '14.5t'\n",
    "float_bad_candidate = 'tttt'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "3f607280-cb74-4e36-a400-da6e0bd1dea9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<re.Match object; span=(0, 4), match='14.5'>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regexp_result = FLOAT_REGEXP.search(float_candidate)\n",
    "regexp_result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "236687c9-91b7-4649-b5cf-7a767ca76f76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'14.5'"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regexp_result.group()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "29bc9fd3-18d8-4e6f-9482-46573da4eda3",
   "metadata": {},
   "outputs": [],
   "source": [
    "FLOAT_REGEXP.search(float_bad_candidate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42983f0c-6035-49e7-b757-ad0dc3960685",
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install missingno"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0c36093-18df-4fdd-8c82-a1eb5c777163",
   "metadata": {},
   "source": [
    "# Основы машинного обучения\n",
    "## Семинар 1. Повторение\n",
    "### Данные\n",
    "\n",
    "**Данные для регрессии**<br>\n",
    "Источник: [kaggle](https://www.kaggle.com/datasets/keremabdullahoglu/laptop-price-dataset-april-2024) (описание и переменные там же).\n",
    "\n",
    "**Данные для классификации**<br>\n",
    "Источник: [kaggle](https://www.kaggle.com/datasets/prakashraushan/loan-dataset).\n",
    "\n",
    "**Данные для задач понижения размерности и кластеризации**<br>\n",
    "Источник: [kaggle](https://www.kaggle.com/datasets/raminhuseyn/airline-customer-satisfaction).\n",
    "\n",
    "### Регрессия\n",
    "#### Посмотрим на данные в целом"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7967dbd6-e4f2-421b-9c50-7f31edb86171",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3981 entries, 0 to 3980\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   Brand                3949 non-null   object \n",
      " 1   Product_Description  3980 non-null   object \n",
      " 2   Screen_Size          3785 non-null   object \n",
      " 3   RAM                  3730 non-null   object \n",
      " 4   Processor            3880 non-null   object \n",
      " 5   GPU                  3247 non-null   object \n",
      " 6   GPU_Type             3258 non-null   object \n",
      " 7   Resolution           3320 non-null   object \n",
      " 8   Condition            3981 non-null   object \n",
      " 9   Price                3980 non-null   float64\n",
      "dtypes: float64(1), object(9)\n",
      "memory usage: 311.1+ KB\n"
     ]
    }
   ],
   "source": [
    "reg_df = pd.read_csv('laptop_prices.csv')\n",
    "reg_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71097840-2453-4003-91ac-53f2d89026f4",
   "metadata": {},
   "source": [
    "**Почему object - это не очень хорошо**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a6899859-fb10-4d5f-910b-09d8fee95d09",
   "metadata": {},
   "outputs": [],
   "source": [
    "array_int = np.array([1, 2, 3], dtype=int)\n",
    "array_object = np.array([1, 2, 3], dtype='object')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3b24c3d6-4240-42ad-a4cf-8d364edc52f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 4, 6], dtype=object)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array_object * 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c5e1022b-8b3b-42b7-b31b-3dd167f56fe6",
   "metadata": {},
   "outputs": [],
   "source": [
    "array_object = np.array([1, 2, '3'], dtype='object')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cbeb90d4-d511-4f01-a289-1e428ab65240",
   "metadata": {},
   "outputs": [],
   "source": [
    "array_int = pd.Series(np.arange(0, 10000))\n",
    "array_object = array_int.astype('object')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1cc4155f-c4dc-4563-99c6-0b001eb47fe3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17.9 µs ± 125 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "_ = array_int * 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dbc4b51f-48b2-4742-abe8-0a7923eb5e6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "129 µs ± 1.28 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "_ = array_object * 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5a1a5e9c-6306-4b7b-8260-9aaa00569eac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 µs ± 20.6 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "_ = array_int.values * 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d26d3907-36ae-453b-ac9c-4ebcc26f059b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "116 µs ± 838 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "_ = array_object.values * 5  # нивелируем плюсы numpy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee1f4f50-d81d-4270-9ac0-cf337459b26d",
   "metadata": {},
   "source": [
    "**Почему object - это не очень хорошо - конец**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fcd2d67c-0710-4455-8f1d-24938977ae44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Product_Description</th>\n",
       "      <th>Screen_Size</th>\n",
       "      <th>RAM</th>\n",
       "      <th>Processor</th>\n",
       "      <th>GPU</th>\n",
       "      <th>GPU_Type</th>\n",
       "      <th>Resolution</th>\n",
       "      <th>Condition</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lenovo</td>\n",
       "      <td>Lenovo ThinkPad L15 Gen 2 15.6” FHD Laptop Cor...</td>\n",
       "      <td>15.6</td>\n",
       "      <td>16</td>\n",
       "      <td>Intel Core i5-1135G7</td>\n",
       "      <td>Intel Iris Xe Graphics</td>\n",
       "      <td>Integrated/On-Board Graphics</td>\n",
       "      <td>1920 x 1080</td>\n",
       "      <td>Very Good - Refurbished</td>\n",
       "      <td>344.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Lenovo</td>\n",
       "      <td>Lenovo ThinkPad 14” HD Laptop PC Computer Core...</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>Intel Core i5 7th Gen.</td>\n",
       "      <td>Intel HD Graphics 520</td>\n",
       "      <td>Integrated/On-Board Graphics</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Very Good - Refurbished</td>\n",
       "      <td>189.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lenovo</td>\n",
       "      <td>Lenovo ThinkPad E14 14\" Laptop Core i5 11th Ge...</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>Intel Core i5-1135G7</td>\n",
       "      <td>Intel Iris Xe Graphics</td>\n",
       "      <td>Integrated/On-Board Graphics</td>\n",
       "      <td>1920 x 1080p</td>\n",
       "      <td>Good - Refurbished</td>\n",
       "      <td>289.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Dell</td>\n",
       "      <td>Dell Latitude 15.6\" Laptop Intel Core i5 64GB ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Intel Core i5 8th Gen.</td>\n",
       "      <td>Intel UHD Graphics 620</td>\n",
       "      <td>Integrated/On-Board Graphics</td>\n",
       "      <td>1920 x 1080</td>\n",
       "      <td>Very Good - Refurbished</td>\n",
       "      <td>349.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ASUS</td>\n",
       "      <td>🔥NEW Asus Vivobook 15.6\" TouchScreen Laptop In...</td>\n",
       "      <td>15.6</td>\n",
       "      <td>16</td>\n",
       "      <td>Intel Core i7-1255U</td>\n",
       "      <td>Intel Iris Xe Graphics</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1920 x 1080</td>\n",
       "      <td>New</td>\n",
       "      <td>538.95</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Brand                                Product_Description Screen_Size  RAM  \\\n",
       "0  Lenovo  Lenovo ThinkPad L15 Gen 2 15.6” FHD Laptop Cor...        15.6   16   \n",
       "1  Lenovo  Lenovo ThinkPad 14” HD Laptop PC Computer Core...          14   16   \n",
       "2  Lenovo  Lenovo ThinkPad E14 14\" Laptop Core i5 11th Ge...          14   16   \n",
       "3    Dell  Dell Latitude 15.6\" Laptop Intel Core i5 64GB ...         NaN  NaN   \n",
       "4    ASUS  🔥NEW Asus Vivobook 15.6\" TouchScreen Laptop In...        15.6   16   \n",
       "\n",
       "                Processor                     GPU  \\\n",
       "0    Intel Core i5-1135G7  Intel Iris Xe Graphics   \n",
       "1  Intel Core i5 7th Gen.   Intel HD Graphics 520   \n",
       "2    Intel Core i5-1135G7  Intel Iris Xe Graphics   \n",
       "3  Intel Core i5 8th Gen.  Intel UHD Graphics 620   \n",
       "4     Intel Core i7-1255U  Intel Iris Xe Graphics   \n",
       "\n",
       "                       GPU_Type    Resolution                Condition   Price  \n",
       "0  Integrated/On-Board Graphics   1920 x 1080  Very Good - Refurbished  344.99  \n",
       "1  Integrated/On-Board Graphics           NaN  Very Good - Refurbished  189.99  \n",
       "2  Integrated/On-Board Graphics  1920 x 1080p       Good - Refurbished  289.99  \n",
       "3  Integrated/On-Board Graphics   1920 x 1080  Very Good - Refurbished  349.99  \n",
       "4                           NaN   1920 x 1080                      New  538.95  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "da46a482-b812-47b6-b648-3561fb2c9dd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Brand                   32\n",
       "Product_Description      1\n",
       "Screen_Size            196\n",
       "RAM                    251\n",
       "Processor              101\n",
       "GPU                    734\n",
       "GPU_Type               723\n",
       "Resolution             661\n",
       "Condition                0\n",
       "Price                    1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9cb87d86-1d34-407d-9e06-a15aa33bde99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2500x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "missingno.matrix(reg_df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4bf79c95-abe7-40e2-bee7-4afa357f013a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df.duplicated().any()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d79268e1-fcf5-4ad6-8e6e-445e62c9bcec",
   "metadata": {},
   "source": [
    "#### Рассмотрим каждую переменную по отдельности\n",
    "`Brand`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "528577c0-2e36-40f7-96a1-f3d88f9ab094",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Brand\n",
       "Dell                         1513\n",
       "HP                            776\n",
       "Lenovo                        773\n",
       "Microsoft                     224\n",
       "ASUS                          172\n",
       "Acer                          131\n",
       "Samsung                        72\n",
       "MSI                            68\n",
       "LG                             49\n",
       "DELL                           49\n",
       "LENOVO                         35\n",
       "Gateway                        18\n",
       "Apple                           8\n",
       "MICROSOFT                       7\n",
       "Asus                            7\n",
       "Razer                           5\n",
       "Panasonic                       5\n",
       "Sony                            3\n",
       "Intel                           2\n",
       "Chuwi                           2\n",
       "Dell Inc.                       2\n",
       "Alienware                       2\n",
       "Google                          2\n",
       "GIGABYTE                        2\n",
       "Ruggon                          1\n",
       "Dell Commercial                 1\n",
       "Lenovo Idea                     1\n",
       "HP Commercial Remarketing       1\n",
       "Dell Latitude                   1\n",
       "Microsoft Surface               1\n",
       "Hewlett Packard                 1\n",
       "AVITA                           1\n",
       "AORUS                           1\n",
       "ThinkPad                        1\n",
       "Sager                           1\n",
       "Eurocom                         1\n",
       "Dell gaming games game          1\n",
       "ByteSpeed                       1\n",
       "VAIO                            1\n",
       "Unbranded                       1\n",
       "acer                            1\n",
       "Getac                           1\n",
       "Huawei                          1\n",
       "LG Electronics                  1\n",
       "Geo                             1\n",
       "SAMSUNG                         1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df['Brand'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9a83b668-e555-46d4-ac14-57c3c4f16257",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Brand\n",
       "dell                         1562\n",
       "lenovo                        808\n",
       "hp                            776\n",
       "microsoft                     231\n",
       "asus                          179\n",
       "acer                          132\n",
       "samsung                        73\n",
       "msi                            68\n",
       "lg                             49\n",
       "gateway                        18\n",
       "apple                           8\n",
       "razer                           5\n",
       "panasonic                       5\n",
       "sony                            3\n",
       "dell inc.                       2\n",
       "intel                           2\n",
       "alienware                       2\n",
       "gigabyte                        2\n",
       "chuwi                           2\n",
       "google                          2\n",
       "thinkpad                        1\n",
       "avita                           1\n",
       "aorus                           1\n",
       "lenovo idea                     1\n",
       "ruggon                          1\n",
       "dell commercial                 1\n",
       "hp commercial remarketing       1\n",
       "dell latitude                   1\n",
       "geo                             1\n",
       "hewlett packard                 1\n",
       "lg electronics                  1\n",
       "huawei                          1\n",
       "sager                           1\n",
       "eurocom                         1\n",
       "dell gaming games game          1\n",
       "bytespeed                       1\n",
       "vaio                            1\n",
       "unbranded                       1\n",
       "getac                           1\n",
       "microsoft surface               1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df['Brand'].str.lower().value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "524d2d06-da52-4439-972c-26cf3234dd27",
   "metadata": {},
   "outputs": [],
   "source": [
    "brands_mapper = {\n",
    "    'dell inc.': 'dell',\n",
    "    'lenovo idea': 'lenovo',\n",
    "    'dell commercial': 'dell',\n",
    "    'dell latitude': 'dell',\n",
    "    'hp commercial remarketing': 'hp',\n",
    "    'hewlett packard': 'hp',\n",
    "    'lg electronics': 'lg',\n",
    "    'dell gaming games game': 'dell',\n",
    "    'microsoft surface': 'microsoft'\n",
    "}\n",
    "\n",
    "reg_df['Brand'] = reg_df['Brand'].str.lower().map(lambda br: brands_mapper.get(br, br))  # pd.Series.map / pd.Series.apply\n",
    "# reg_df['Brand'] = reg_df['Brand'].str.lower().apply(lambda br: brands_mapper.get(br, br))\n",
    "# pd.DataFrame.apply -> применяет map к всем pd.Series, которые в нем находятся"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b4337b8c-2197-4ab8-86bb-06a456be1d5e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Brand\n",
       "dell         1567\n",
       "lenovo        809\n",
       "hp            778\n",
       "microsoft     232\n",
       "asus          179\n",
       "acer          132\n",
       "samsung        73\n",
       "msi            68\n",
       "lg             50\n",
       "gateway        18\n",
       "apple           8\n",
       "panasonic       5\n",
       "razer           5\n",
       "sony            3\n",
       "intel           2\n",
       "google          2\n",
       "chuwi           2\n",
       "alienware       2\n",
       "gigabyte        2\n",
       "eurocom         1\n",
       "ruggon          1\n",
       "avita           1\n",
       "sager           1\n",
       "getac           1\n",
       "bytespeed       1\n",
       "vaio            1\n",
       "unbranded       1\n",
       "thinkpad        1\n",
       "huawei          1\n",
       "geo             1\n",
       "aorus           1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "brand_counts = reg_df['Brand'].value_counts()\n",
    "brand_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6411df36-46c3-46af-bb49-f3d1f389b01c",
   "metadata": {},
   "outputs": [],
   "source": [
    "brands_to_mark_other = brand_counts.index[brand_counts.values < 20]\n",
    "reg_df.loc[reg_df['Brand'].isin(brands_to_mark_other), 'Brand'] = 'other'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "427268a1-fcc2-4918-9f9a-af704cee5efa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Brand\n",
       "dell         1567\n",
       "lenovo        809\n",
       "hp            778\n",
       "microsoft     232\n",
       "asus          179\n",
       "acer          132\n",
       "samsung        73\n",
       "msi            68\n",
       "other          61\n",
       "lg             50\n",
       "NaN            32\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df['Brand'].value_counts(dropna=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "193488ae-5d3f-4bdb-a30e-eb533b91af5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# в колонке Brand остались пропущенные значения. Лучше всего было бы достать название бренда из описания"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a54dac4d-92e1-435a-81a5-37ad5894b9ce",
   "metadata": {},
   "source": [
    "`Screen_Size`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0c482752-d4c8-42d6-9c68-c119ae2ded7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Product_Description</th>\n",
       "      <th>Screen_Size</th>\n",
       "      <th>RAM</th>\n",
       "      <th>Processor</th>\n",
       "      <th>GPU</th>\n",
       "      <th>GPU_Type</th>\n",
       "      <th>Resolution</th>\n",
       "      <th>Condition</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>lenovo</td>\n",
       "      <td>Lenovo ThinkPad L15 Gen 2 15.6” FHD Laptop Cor...</td>\n",
       "      <td>15.6</td>\n",
       "      <td>16</td>\n",
       "      <td>Intel Core i5-1135G7</td>\n",
       "      <td>Intel Iris Xe Graphics</td>\n",
       "      <td>Integrated/On-Board Graphics</td>\n",
       "      <td>1920 x 1080</td>\n",
       "      <td>Very Good - Refurbished</td>\n",
       "      <td>344.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>lenovo</td>\n",
       "      <td>Lenovo ThinkPad 14” HD Laptop PC Computer Core...</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>Intel Core i5 7th Gen.</td>\n",
       "      <td>Intel HD Graphics 520</td>\n",
       "      <td>Integrated/On-Board Graphics</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Very Good - Refurbished</td>\n",
       "      <td>189.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>lenovo</td>\n",
       "      <td>Lenovo ThinkPad E14 14\" Laptop Core i5 11th Ge...</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>Intel Core i5-1135G7</td>\n",
       "      <td>Intel Iris Xe Graphics</td>\n",
       "      <td>Integrated/On-Board Graphics</td>\n",
       "      <td>1920 x 1080p</td>\n",
       "      <td>Good - Refurbished</td>\n",
       "      <td>289.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>dell</td>\n",
       "      <td>Dell Latitude 15.6\" Laptop Intel Core i5 64GB ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Intel Core i5 8th Gen.</td>\n",
       "      <td>Intel UHD Graphics 620</td>\n",
       "      <td>Integrated/On-Board Graphics</td>\n",
       "      <td>1920 x 1080</td>\n",
       "      <td>Very Good - Refurbished</td>\n",
       "      <td>349.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>asus</td>\n",
       "      <td>🔥NEW Asus Vivobook 15.6\" TouchScreen Laptop In...</td>\n",
       "      <td>15.6</td>\n",
       "      <td>16</td>\n",
       "      <td>Intel Core i7-1255U</td>\n",
       "      <td>Intel Iris Xe Graphics</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1920 x 1080</td>\n",
       "      <td>New</td>\n",
       "      <td>538.95</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Brand                                Product_Description Screen_Size  RAM  \\\n",
       "0  lenovo  Lenovo ThinkPad L15 Gen 2 15.6” FHD Laptop Cor...        15.6   16   \n",
       "1  lenovo  Lenovo ThinkPad 14” HD Laptop PC Computer Core...          14   16   \n",
       "2  lenovo  Lenovo ThinkPad E14 14\" Laptop Core i5 11th Ge...          14   16   \n",
       "3    dell  Dell Latitude 15.6\" Laptop Intel Core i5 64GB ...         NaN  NaN   \n",
       "4    asus  🔥NEW Asus Vivobook 15.6\" TouchScreen Laptop In...        15.6   16   \n",
       "\n",
       "                Processor                     GPU  \\\n",
       "0    Intel Core i5-1135G7  Intel Iris Xe Graphics   \n",
       "1  Intel Core i5 7th Gen.   Intel HD Graphics 520   \n",
       "2    Intel Core i5-1135G7  Intel Iris Xe Graphics   \n",
       "3  Intel Core i5 8th Gen.  Intel UHD Graphics 620   \n",
       "4     Intel Core i7-1255U  Intel Iris Xe Graphics   \n",
       "\n",
       "                       GPU_Type    Resolution                Condition   Price  \n",
       "0  Integrated/On-Board Graphics   1920 x 1080  Very Good - Refurbished  344.99  \n",
       "1  Integrated/On-Board Graphics           NaN  Very Good - Refurbished  189.99  \n",
       "2  Integrated/On-Board Graphics  1920 x 1080p       Good - Refurbished  289.99  \n",
       "3  Integrated/On-Board Graphics   1920 x 1080  Very Good - Refurbished  349.99  \n",
       "4                           NaN   1920 x 1080                      New  538.95  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "8bc0149d-be89-47a6-b587-89b23d480f81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'15.6'"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'15.6\"'[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "667caa5d-3510-4107-8c98-50d600e17866",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "196"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df['Screen_Size'].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "25c2d160-d92d-42ee-adac-9aa65d100c64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df['Screen_Size'].nunique(dropna=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ef2f284b-71a3-4fb2-a9ec-758bc9da51d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df['Screen_Size'].unique().size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4e834152-89a4-4fe3-b56d-f23ff83481fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(reg_df['Screen_Size'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ac1e3afe-daff-4360-b459-7bae8e28c10f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: '14\"'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[38], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mreg_df\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mScreen_Size\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mfloat\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/teaching/lib/python3.11/site-packages/pandas/core/generic.py:6643\u001b[0m, in \u001b[0;36mNDFrame.astype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   6637\u001b[0m     results \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m   6638\u001b[0m         ser\u001b[38;5;241m.\u001b[39mastype(dtype, copy\u001b[38;5;241m=\u001b[39mcopy, errors\u001b[38;5;241m=\u001b[39merrors) \u001b[38;5;28;01mfor\u001b[39;00m _, ser \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m   6639\u001b[0m     ]\n\u001b[1;32m   6641\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   6642\u001b[0m     \u001b[38;5;66;03m# else, only a single dtype is given\u001b[39;00m\n\u001b[0;32m-> 6643\u001b[0m     new_data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_mgr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6644\u001b[0m     res \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_constructor_from_mgr(new_data, axes\u001b[38;5;241m=\u001b[39mnew_data\u001b[38;5;241m.\u001b[39maxes)\n\u001b[1;32m   6645\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m res\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mastype\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m~/teaching/lib/python3.11/site-packages/pandas/core/internals/managers.py:430\u001b[0m, in \u001b[0;36mBaseBlockManager.astype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    427\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m using_copy_on_write():\n\u001b[1;32m    428\u001b[0m     copy \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m--> 430\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    431\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mastype\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    432\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    433\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    434\u001b[0m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    435\u001b[0m \u001b[43m    \u001b[49m\u001b[43musing_cow\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43musing_copy_on_write\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    436\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/teaching/lib/python3.11/site-packages/pandas/core/internals/managers.py:363\u001b[0m, in \u001b[0;36mBaseBlockManager.apply\u001b[0;34m(self, f, align_keys, **kwargs)\u001b[0m\n\u001b[1;32m    361\u001b[0m         applied \u001b[38;5;241m=\u001b[39m b\u001b[38;5;241m.\u001b[39mapply(f, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    362\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 363\u001b[0m         applied \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mgetattr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    364\u001b[0m     result_blocks \u001b[38;5;241m=\u001b[39m extend_blocks(applied, result_blocks)\n\u001b[1;32m    366\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m)\u001b[38;5;241m.\u001b[39mfrom_blocks(result_blocks, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxes)\n",
      "File \u001b[0;32m~/teaching/lib/python3.11/site-packages/pandas/core/internals/blocks.py:758\u001b[0m, in \u001b[0;36mBlock.astype\u001b[0;34m(self, dtype, copy, errors, using_cow, squeeze)\u001b[0m\n\u001b[1;32m    755\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCan not squeeze with more than one column.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    756\u001b[0m     values \u001b[38;5;241m=\u001b[39m values[\u001b[38;5;241m0\u001b[39m, :]  \u001b[38;5;66;03m# type: ignore[call-overload]\u001b[39;00m\n\u001b[0;32m--> 758\u001b[0m new_values \u001b[38;5;241m=\u001b[39m \u001b[43mastype_array_safe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    760\u001b[0m new_values \u001b[38;5;241m=\u001b[39m maybe_coerce_values(new_values)\n\u001b[1;32m    762\u001b[0m refs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/teaching/lib/python3.11/site-packages/pandas/core/dtypes/astype.py:237\u001b[0m, in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    234\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m dtype\u001b[38;5;241m.\u001b[39mnumpy_dtype\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 237\u001b[0m     new_values \u001b[38;5;241m=\u001b[39m \u001b[43mastype_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    238\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (\u001b[38;5;167;01mValueError\u001b[39;00m, \u001b[38;5;167;01mTypeError\u001b[39;00m):\n\u001b[1;32m    239\u001b[0m     \u001b[38;5;66;03m# e.g. _astype_nansafe can fail on object-dtype of strings\u001b[39;00m\n\u001b[1;32m    240\u001b[0m     \u001b[38;5;66;03m#  trying to convert to float\u001b[39;00m\n\u001b[1;32m    241\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[0;32m~/teaching/lib/python3.11/site-packages/pandas/core/dtypes/astype.py:182\u001b[0m, in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m    179\u001b[0m     values \u001b[38;5;241m=\u001b[39m values\u001b[38;5;241m.\u001b[39mastype(dtype, copy\u001b[38;5;241m=\u001b[39mcopy)\n\u001b[1;32m    181\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 182\u001b[0m     values \u001b[38;5;241m=\u001b[39m \u001b[43m_astype_nansafe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    184\u001b[0m \u001b[38;5;66;03m# in pandas we don't store numpy str dtypes, so convert to object\u001b[39;00m\n\u001b[1;32m    185\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, np\u001b[38;5;241m.\u001b[39mdtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28missubclass\u001b[39m(values\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;241m.\u001b[39mtype, \u001b[38;5;28mstr\u001b[39m):\n",
      "File \u001b[0;32m~/teaching/lib/python3.11/site-packages/pandas/core/dtypes/astype.py:133\u001b[0m, in \u001b[0;36m_astype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n\u001b[1;32m    131\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m copy \u001b[38;5;129;01mor\u001b[39;00m arr\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mobject\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m dtype \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mobject\u001b[39m:\n\u001b[1;32m    132\u001b[0m     \u001b[38;5;66;03m# Explicit copy, or required since NumPy can't view from / to object.\u001b[39;00m\n\u001b[0;32m--> 133\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43marr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m    135\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m arr\u001b[38;5;241m.\u001b[39mastype(dtype, copy\u001b[38;5;241m=\u001b[39mcopy)\n",
      "\u001b[0;31mValueError\u001b[0m: could not convert string to float: '14\"'"
     ]
    }
   ],
   "source": [
    "reg_df['Screen_Size'].astype(float)  # 14.6\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "f3812c50-d56f-4baa-ae1c-d17d2b62000f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_screen_size(value: Union[float|str]) -> float:  # typing кое-где считается хорошим тоном\n",
    "    if type(value) == float:\n",
    "        return value\n",
    "\n",
    "    regexp_result = FLOAT_REGEXP.search(value)\n",
    "\n",
    "    if regexp_result is None:\n",
    "        return None\n",
    "    else:\n",
    "        return float(regexp_result.group())\n",
    "\n",
    "def extract_screen_size(description: str) -> str:\n",
    "    if pd.isna(description):\n",
    "        return None\n",
    "    \n",
    "    regexp_result = SCREEN_SIZE_REGEXP.search(description)\n",
    "\n",
    "    if regexp_result is None:\n",
    "        return None\n",
    "        \n",
    "    return regexp_result.group()[:-1]\n",
    "\n",
    "\n",
    "reg_df['Screen_Size'] = reg_df['Screen_Size'].apply(lambda val: process_screen_size(val))\n",
    "screen_size = pd.Series([extract_screen_size(description) for description in reg_df['Product_Description'].tolist()]).astype(float)\n",
    "\n",
    "reg_df.loc[reg_df['Screen_Size'].isna(), 'Screen_Size'] = screen_size[reg_df['Screen_Size'].isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "5b03587d-37e2-4152-964b-23d0058cbb50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "80"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df['Screen_Size'].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "d4a99488-0b7c-46c3-8ff7-c6263bcdff03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    3901.000000\n",
       "mean       14.600500\n",
       "std         1.282368\n",
       "min         0.000000\n",
       "25%        14.000000\n",
       "50%        14.000000\n",
       "75%        15.600000\n",
       "max        39.600000\n",
       "Name: Screen_Size, dtype: float64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_df['Screen_Size'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "9d2d5960-5d74-4b2f-9ec1-ab7611e81853",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "reg_df['Screen_Size'].hist(bins=20, edgecolor='black');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "7ddf1317-3813-41a8-b4c2-14986d240a5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "reg_df['Screen_Size'].plot.box();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "f0dc2ae1-cf15-46c6-8baa-e09368ba83bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1 = reg_df['Screen_Size'].quantile(0.25)\n",
    "Q3 = reg_df['Screen_Size'].quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "right_limit = Q3 + 1.5 * IQR\n",
    "left_limit = 5\n",
    "# left_limit = Q1 - 1.5 * IQR\n",
    "\n",
    "screen_size_filter = (reg_df['Screen_Size'].values >= left_limit) & (reg_df['Screen_Size'].values <= right_limit)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1675fa01-1e91-4adb-bc02-793727b58c12",
   "metadata": {},
   "source": [
    "![](https://i2.wp.com/miro.medium.com/1*Xb0RiyFI-8LQ4gysW1YP1w.png)\n",
    "`RAM`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8650fc8d-2dfd-4f9a-83a1-f5b2f12d90cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27f8c22f-0c27-485b-b48c-540f35f0927b",
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_df['RAM'].value_counts(dropna=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d720bb3-30bd-463a-92e2-13e610277a1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_ram(value: Union[int|float|str]) -> str:\n",
    "    if pd.isna(value):\n",
    "        return pd.NA\n",
    "    \n",
    "    regexp_result = INT_REGEXP.search(value)\n",
    "\n",
    "    if regexp_result is None:\n",
    "        return pd.NA\n",
    "\n",
    "    ram_int = int(regexp_result.group())\n",
    "\n",
    "    if ram_int > 128:\n",
    "        return pd.NA\n",
    "\n",
    "    return str(ram_int)\n",
    "\n",
    "reg_df['RAM'] = reg_df['RAM'].map(lambda val: process_ram(val))\n",
    "# screen_size = pd.Series([extract_screen_size(description) for description in reg_df['Product_Description'].tolist()]).astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77903e0c-547a-4bb0-8d35-7127cd050628",
   "metadata": {},
   "outputs": [],
   "source": [
    "ram_counts = reg_df['RAM'].value_counts()\n",
    "ram_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc7e2239-db36-43cc-aa1f-32d60ca13940",
   "metadata": {},
   "outputs": [],
   "source": [
    "ram_filter = reg_df['RAM'].isin(ram_counts.index[ram_counts.values >= 20]) & reg_df['RAM'].notna()\n",
    "# можно попробовать достать, но сейчас не будем: важен принцип"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad9f95cd-4ecb-460d-aa1b-60b0b15e5fd1",
   "metadata": {},
   "source": [
    "`Processor`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47f58615-f0a7-40ad-aa2e-54bd224dc859",
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5adf9ceb-fb14-41ad-a7bf-39c5c2afbf2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# rules:\n",
    "# no gen, only name -> from i5[-1135]\n",
    "# gen -> from gen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d578f9ce-045c-4b4d-ae2a-288d0348a684",
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_df.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e39ab307-312f-40f6-8ead-0202241710a2",
   "metadata": {},
   "source": [
    "### Классификация"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e13ef902-812d-4587-b20f-41007002a356",
   "metadata": {},
   "outputs": [],
   "source": [
    "class_df = pd.read_csv('loans.csv')\n",
    "class_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9facf2b-3e6b-4cfc-88b4-862722a24a35",
   "metadata": {},
   "outputs": [],
   "source": [
    "class_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f64e7c71-1ccc-441c-8dbb-0e8c4b3fe948",
   "metadata": {},
   "outputs": [],
   "source": [
    "missingno.matrix(class_df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8286e591-63f5-4dcb-a00d-fdffcabdb73d",
   "metadata": {},
   "outputs": [],
   "source": [
    "class_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b385a9f-25d3-414c-baae-79ed29517547",
   "metadata": {},
   "source": [
    "employment_duration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2e5cb0b-b9ec-460c-b44f-6bdeba1f7854",
   "metadata": {},
   "outputs": [],
   "source": [
    "class_df['employment_duration'].hist(bins=20, edgecolor='black');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "962983fc-0297-4cc1-b4e2-e9683927f118",
   "metadata": {},
   "outputs": [],
   "source": [
    "class_df['employment_duration'] = class_df['employment_duration'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c889842-ffec-44b9-869d-eadee67cdb99",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "626e2bba-d1c2-404c-8efb-0d7f3d416f24",
   "metadata": {},
   "source": [
    "### Кластеризация и понижение размерности"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cc79af9-1a91-4c0a-8336-af06da597694",
   "metadata": {},
   "outputs": [],
   "source": [
    "clust_df = pd.read_csv('airline_customer_satisfaction.csv')\n",
    "clust_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45e0207e-26e4-47b8-a49f-4faf3409e8b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "clust_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f2a1df7-93b9-436b-b142-34443070e739",
   "metadata": {},
   "outputs": [],
   "source": [
    "missingno.matrix(clust_df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33196381-3427-4e37-8861-c670afd22475",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
